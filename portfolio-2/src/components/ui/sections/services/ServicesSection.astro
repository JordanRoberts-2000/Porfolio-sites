---
import SvgDivider from "../../../../../lib/components/SvgDivider.astro";
import Service from "./Service.astro"

const services = ['Spray Tanning','Barbering', 'Waxing', 'Face', 'Wedding', 'Treatments', 'Spray tanning', 'Hair', 'Color']
---

<section class="px-4 md:px-16 pb-4 pt-16 relative bg-black text-white overflow-hidden">
    <SvgDivider width={"large"}/>
    {services.map((service) => (
        <Service title={service}/>
    ))}
</section>
<script>
    const options = {
    root: null, // Use the viewport as the root
    rootMargin: '-50% 0% -50% 0%', // No margin around the viewport
    threshold: 0 // Trigger the callback as soon as the target enters the root
};
function callback(entries: IntersectionObserverEntry[]) {
    entries.forEach(entry => {
        // Check if the target element intersects with the root (viewport)
        if (entry.isIntersecting) {
            console.log("intersecting")
            entry.target.setAttribute('active', 'true');
        }else{
            console.log("left")
            entry.target.removeAttribute('active');
        }
    });
}

// Create a new Intersection Observer
const observer = new IntersectionObserver(callback, options);

// Get the target element
const targetElement = document.querySelectorAll('.trigger'); // Replace 'yourElementId' with the ID of your element
targetElement.forEach((el) => observer.observe(el))
// Start observing the target element
</script>
<style is:global>
    .yourElementId{
        @apply -translate-x-8 -rotate-12 scale-0 opacity-0
    }
    .trigger[active] .yourElementId{
        @apply translate-x-0 rotate-12 scale-110 opacity-100;
    }
    .trigger[active] {
        @apply text-teal-400
    }
    .trigger[active] svg{
        @apply scale-125
    }
</style>