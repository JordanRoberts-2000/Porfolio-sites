---
import type { HTMLAttributes } from "astro/types";
import { Cloudinary } from '@cloudinary/url-gen';
import { scale } from "@cloudinary/url-gen/actions/resize";
type Props = {
    src: string;
    alt: string;
    sizes?: string;
    quality?: number | ('low' | 'high');
    class?: string;
    loading?: "lazy" | "eager";
    fetchpriority?: "low" | "high" | "auto";
    important?: true;
    width?: number;
    height?: number;
} & HTMLAttributes<"img">;
const {
    src,
    alt,
    quality,
    width,
    height,
    class: className,
    sizes,
    loading,
    fetchpriority,
    important,
    ...rest
} = Astro.props;
const cloudName = import.meta.env.CLOUDINARY_CLOUD_NAME;

if(cloudName === undefined || cloudName === null || cloudName === '') {
	throw new Error('Cloudinary cloud name is not defined');
}

const cld = new Cloudinary({
  cloud: {
    cloudName: cloudName
  }
});

let cldSrc = cld.image(src)
                .format('avif')
                .quality((quality === 'high' || important) ? 'auto:best' : quality === 'low' ? 'auto:low' : 'auto' )
                .resize(scale().width(1024))

if ( src.startsWith('https://')) {
  cldSrc.setDeliveryType('fetch');
}
---

<img
    loading={important ? "eager" : loading ?? "lazy"}
    fetchpriority={important ? "high" : fetchpriority ?? "auto"}
    src={cldSrc.toURL()}
    alt={alt}
    decoding={"async"}
    class={className}
    {...rest}
/>
