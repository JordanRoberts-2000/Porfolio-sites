---
type Props = {
    animationType?: "reveal" | "overlay"
} & HTMLAttributes<'header'>
const { animationType="overlay", class: className, ...rest } = Astro.props;
import { cn } from '@strawr/utils'
import type { HTMLAttributes } from 'astro/types';
---
<header class={cn("sticky top-0 w-full h-12 group flex z-50", className)} {...rest}>
    <div 
        id="header-dropback"
        class="-z-10 transition-opacity absolute top-0 w-full h-screen group-data-[active]:pointer-events-auto pointer-events-none bg-blue-800 opacity-0 group-data-[active]:opacity-20">   
    </div>
    <slot/>
</header>
<script>
    const dropback = document.querySelector('#header-dropback');
    const header = document.querySelector('header');
    dropback?.addEventListener('click', () => {
        header?.removeAttribute("data-active");
    })
</script>
{animationType==="overlay" &&
<script>
    const hamburgerMenu = document.querySelector('#hamburgerMenu');
    const header = document.querySelector('header');
    hamburgerMenu?.addEventListener('click', () => {
        header?.toggleAttribute("data-active");
    })
</script>
}
{animationType==="reveal" &&
<script is:inline>
    const hamburgerMenu = document.querySelector("#hamburgerMenu");
    const header = document.querySelector("header");
    const pageContent =
        document.querySelector("#pageContent");
    hamburgerMenu?.addEventListener("click", () => {
        const nav = document.querySelector("nav");
        const { width: navWidth } = nav.getBoundingClientRect();
        if (header?.hasAttribute("data-active")) {
            requestAnimationFrame(() => {
                pageContent.style.transform = `translateX(0px)`;
            });
        } else {
            requestAnimationFrame(() => {
                pageContent.style.transform = `translateX(${navWidth}px)`;
            });
        }
        header?.toggleAttribute("data-active");
    });
    window.addEventListener("resize", () => {
        header?.removeAttribute("data-active");
        requestAnimationFrame(() => {
            pageContent.style.transform = `translateX(0px)`;
        })
    });
</script>
}