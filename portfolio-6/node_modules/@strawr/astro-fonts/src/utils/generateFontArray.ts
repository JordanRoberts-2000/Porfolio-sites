import type { FontPluginConfig } from "@strawr/astro-fonts/src/types/googleFontTypes.js";
import type { FontData } from "../types/fontUtils.js"
import { dirname, join } from 'path';
import fs from 'fs';
import { fileURLToPath } from "url"

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const defaultDisplay = "swap"

export default function generateFontArray(fontsArray: FontPluginConfig): FontData[] {
    const baseUrl = 'https://fonts.googleapis.com/css2?family=';
    let fontData = [];
    fontsArray.forEach((data) => {
        let fontName = data.font.replace(/_/g, '+');
        if (!data.weight && !("italic" in data)) {
            try {
                const jsonData = fs.readFileSync(join(__dirname, 'googleFontData.json'), 'utf8');
                const specificFont = JSON.parse(jsonData).find(item => item.family === data.font)
                data.weight = specificFont.weights;
                // @ts-ignore
                data.italic = specificFont.italicWeights;
            } catch (error) {
                console.error('Error reading JSON file:', error);
                return null;
            }
        }
        if (Array.isArray(data.weight)) {
            data.weight.forEach((w) => {
                fontData = [...fontData, {
                    url: `${baseUrl}${fontName}:wght@${w}&display=${defaultDisplay}`,
                    name: data.font,
                    weight: w,
                    italic: false
                }];
            })
        } else {
            fontData = [...fontData, {
                url: `${baseUrl}${fontName}:wght@${data.weight}&display=${defaultDisplay}`,
                name: data.font,
                weight: data.weight,
                italic: false
            }];
        }
        if ("italic" in data) {
            if (Array.isArray(data.italic)) {
                data.italic.forEach((i) => {
                    fontData = [...fontData, {
                        url: `${baseUrl}${fontName}:ital,wght@1,${i}&display=${defaultDisplay}`,
                        name: data.font,
                        weight: i,
                        italic: true
                    }];
                })
            } else {
                fontData = [...fontData, {
                    url: `${baseUrl}${fontName}:ital,wght@1,${data.italic}&display=${defaultDisplay}`,
                    name: data.font,
                    weight: data.italic,
                    italic: true
                }];
            }
        }
    });
    return fontData;
}