import type { AstroIntegration } from 'astro'
import { load } from 'cheerio'
import fs from 'fs'
import { readFile, writeFile } from 'fs/promises'
import { join } from 'path'
import { fileURLToPath } from 'url'
import type { FontPluginConfig } from '../types/googleFontTypes.js'
import generateFontArray from '../utils/generateFontArray.js'
import type { FontData } from "../types/fontUtils.js"
import downloadGoogleFont from '../utils/downloadGoogleFont.js'
import generateBuildCss from '../utils/generateBuildCss.js'
import { BUILD_FOLDER_NAME, CSS_BUILD_FILE_NAME } from '../utils/constants.js'

let buildFormat: "file" | "directory" | "preserve"
let fontsSelected: FontData[];
let classNames: { font: string, className: string }[] = [];
let cssVariables: { font: string, cssVariable: string }[] = [];

export default (config: FontPluginConfig): AstroIntegration => {
    return {
        name: 'font-plugin',
        hooks: {
            'astro:config:setup': ({ command, injectScript }) => {
                fontsSelected = generateFontArray(config);
                cssVariables = config
                    .filter(item => item.cssVariable !== undefined)
                    .map(item => ({ font: item.font, cssVariable: item.cssVariable.startsWith("--") ? item.cssVariable : "--" + item.cssVariable }));
                classNames = config
                    .filter(item => item.className !== undefined)
                    .map(item => ({ font: item.font, className: item.className }));
                if (command === 'dev') {
                    fontsSelected.forEach(({ url, name }, i) => {
                        const js = `
                            const __strawr_font_link_${name}_${i} = document.createElement('link');
                            __strawr_font_link_${name}_${i}.rel = 'stylesheet';
                            __strawr_font_link_${name}_${i}.href = "${url}";
                            document.head.appendChild(__strawr_font_link_${name}_${i});
                        `;
                        injectScript('page', js)
                    })
                    classNames.forEach(({ font, className }) => {
                        const js = `
                            const __strawr_font_classNameCss_${font} = '.${className}{font-family: "${font.replace(/_/g, ' ')}";}';
                            const __strawr_font_classNameStyleElement_${font} = document.createElement('style');
                            __strawr_font_classNameStyleElement_${font}.appendChild(document.createTextNode(__strawr_font_classNameCss_${font}));
                            document.head.appendChild(__strawr_font_classNameStyleElement_${font});
                        `
                        injectScript('page', js)
                    })
                    cssVariables.forEach(({ font, cssVariable }) => {
                        const js = `
                            const __strawr_font_variableCss_${font} = ':root { ${cssVariable}: ${font.replace(/_/g, ' ')}; }';
                            const __strawr_font_variableStyleElement_${font} = document.createElement('style');
                            __strawr_font_variableStyleElement_${font}.appendChild(document.createTextNode(__strawr_font_variableCss_${font}));
                            document.head.appendChild(__strawr_font_variableStyleElement_${font});
                        `
                        injectScript('page', js)
                    })
                }
            },
            'astro:config:done': ({ config }) => {
                buildFormat = config.build.format;
            },
            'astro:build:done': async ({ pages, dir }) => {
                const promises = pages.map(async ({ pathname }) => {
                    let extensionWithPathname = ''

                    if (pathname === '') {
                        extensionWithPathname = 'index.html'
                    } else if (pathname === '404/') {
                        extensionWithPathname = '404.html'
                    } else if (buildFormat === 'directory') {
                        extensionWithPathname = join(pathname, 'index.html')
                    } else {
                        extensionWithPathname = pathname.replace(/\/$/, '') + '.html'
                    }

                    const filePath = join(fileURLToPath(dir), extensionWithPathname)
                    const file = await readFile(filePath, 'utf-8')
                    const $ = load(file)
                    // toDO add preload
                    // loop through font names check for preload
                    // $('head').append(`<link rel="preload" as="font" type="font/woff2" href="${"/test"}">`)
                    $('head').append(`<link rel="stylesheet" href="/${BUILD_FOLDER_NAME}/${CSS_BUILD_FILE_NAME}.css">`)
                    await writeFile(filePath, $.html())
                })
                fs.mkdirSync(join(fileURLToPath(dir), BUILD_FOLDER_NAME));
                const googleFontDownloads = fontsSelected.map(async ({ url, name, weight, italic }) => {
                    console.log(`${name}_${weight}_${italic ? 'italic' : 'normal'}.woff2`)
                    await downloadGoogleFont(url, join(fileURLToPath(dir), BUILD_FOLDER_NAME, `${name}_${weight}_${italic ? 'italic' : 'normal'}.woff2`))
                })
                await Promise.all(promises)
                await Promise.all(googleFontDownloads)
                const cssContent = await generateBuildCss(fontsSelected, cssVariables, classNames);
                await writeFile(join(fileURLToPath(dir), BUILD_FOLDER_NAME, `${CSS_BUILD_FILE_NAME}.css`), cssContent)
            },
        }
    }
}